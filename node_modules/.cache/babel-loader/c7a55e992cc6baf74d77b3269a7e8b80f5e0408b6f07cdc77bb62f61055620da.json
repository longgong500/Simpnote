{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { defined } from './util.js';\nexport var FontWeight;\n(function (FontWeight) {\n  FontWeight[\"NORMAL\"] = \"normal\";\n  FontWeight[\"BOLD\"] = \"bold\";\n})(FontWeight || (FontWeight = {}));\nexport var FontStyle;\n(function (FontStyle) {\n  FontStyle[\"NORMAL\"] = \"normal\";\n  FontStyle[\"ITALIC\"] = \"italic\";\n})(FontStyle || (FontStyle = {}));\nlet fontParser;\nconst Fonts = {};\nclass Font {\n  static convertSizeToPixelValue(fontSize = Font.SIZE) {\n    var _a;\n    if (typeof fontSize === 'number') {\n      return fontSize * Font.scaleToPxFrom.pt;\n    } else {\n      const value = parseFloat(fontSize);\n      if (isNaN(value)) {\n        return 0;\n      }\n      const unit = fontSize.replace(/[\\d.\\s]/g, '').toLowerCase();\n      const conversionFactor = (_a = Font.scaleToPxFrom[unit]) !== null && _a !== void 0 ? _a : 1;\n      return value * conversionFactor;\n    }\n  }\n  static convertSizeToPointValue(fontSize = Font.SIZE) {\n    var _a;\n    if (typeof fontSize === 'number') {\n      return fontSize;\n    } else {\n      const value = parseFloat(fontSize);\n      if (isNaN(value)) {\n        return 0;\n      }\n      const unit = fontSize.replace(/[\\d.\\s]/g, '').toLowerCase();\n      const conversionFactor = ((_a = Font.scaleToPxFrom[unit]) !== null && _a !== void 0 ? _a : 1) / Font.scaleToPxFrom.pt;\n      return value * conversionFactor;\n    }\n  }\n  static validate(f, size, weight, style) {\n    if (typeof f === 'string' && size === undefined && weight === undefined && style === undefined) {\n      return Font.fromCSSString(f);\n    }\n    let family;\n    if (typeof f === 'object') {\n      family = f.family;\n      size = f.size;\n      weight = f.weight;\n      style = f.style;\n    } else {\n      family = f;\n    }\n    family = family !== null && family !== void 0 ? family : Font.SANS_SERIF;\n    size = size !== null && size !== void 0 ? size : Font.SIZE + 'pt';\n    weight = weight !== null && weight !== void 0 ? weight : FontWeight.NORMAL;\n    style = style !== null && style !== void 0 ? style : FontStyle.NORMAL;\n    if (weight === '') {\n      weight = FontWeight.NORMAL;\n    }\n    if (style === '') {\n      style = FontStyle.NORMAL;\n    }\n    if (typeof size === 'number') {\n      size = `${size}pt`;\n    }\n    if (typeof weight === 'number') {\n      weight = weight.toString();\n    }\n    return {\n      family,\n      size,\n      weight,\n      style\n    };\n  }\n  static fromCSSString(cssFontShorthand) {\n    if (!fontParser) {\n      fontParser = document.createElement('span');\n    }\n    fontParser.style.font = cssFontShorthand;\n    const {\n      fontFamily,\n      fontSize,\n      fontWeight,\n      fontStyle\n    } = fontParser.style;\n    return {\n      family: fontFamily,\n      size: fontSize,\n      weight: fontWeight,\n      style: fontStyle\n    };\n  }\n  static toCSSString(fontInfo) {\n    var _a;\n    if (!fontInfo) {\n      return '';\n    }\n    let style;\n    const st = fontInfo.style;\n    if (st === FontStyle.NORMAL || st === '' || st === undefined) {\n      style = '';\n    } else {\n      style = st.trim() + ' ';\n    }\n    let weight;\n    const wt = fontInfo.weight;\n    if (wt === FontWeight.NORMAL || wt === '' || wt === undefined) {\n      weight = '';\n    } else if (typeof wt === 'number') {\n      weight = wt + ' ';\n    } else {\n      weight = wt.trim() + ' ';\n    }\n    let size;\n    const sz = fontInfo.size;\n    if (sz === undefined) {\n      size = Font.SIZE + 'pt ';\n    } else if (typeof sz === 'number') {\n      size = sz + 'pt ';\n    } else {\n      size = sz.trim() + ' ';\n    }\n    const family = (_a = fontInfo.family) !== null && _a !== void 0 ? _a : Font.SANS_SERIF;\n    return `${style}${weight}${size}${family}`;\n  }\n  static scaleSize(fontSize, scaleFactor) {\n    if (typeof fontSize === 'number') {\n      return fontSize * scaleFactor;\n    } else {\n      const value = parseFloat(fontSize);\n      const unit = fontSize.replace(/[\\d.\\s]/g, '');\n      return `${value * scaleFactor}${unit}`;\n    }\n  }\n  static isBold(weight) {\n    if (!weight) {\n      return false;\n    } else if (typeof weight === 'number') {\n      return weight >= 600;\n    } else {\n      const parsedWeight = parseInt(weight, 10);\n      if (isNaN(parsedWeight)) {\n        return weight.toLowerCase() === 'bold';\n      } else {\n        return parsedWeight >= 600;\n      }\n    }\n  }\n  static isItalic(style) {\n    if (!style) {\n      return false;\n    } else {\n      return style.toLowerCase() === FontStyle.ITALIC;\n    }\n  }\n  static loadWebFont(fontName, woffURL, includeWoff2 = true) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const woff2URL = includeWoff2 ? `url(${woffURL}2) format('woff2'), ` : '';\n      const woff1URL = `url(${woffURL}) format('woff')`;\n      const woffURLs = woff2URL + woff1URL;\n      const fontFace = new FontFace(fontName, woffURLs);\n      yield fontFace.load();\n      document.fonts.add(fontFace);\n      return fontFace;\n    });\n  }\n  static loadWebFonts() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const host = Font.WEB_FONT_HOST;\n      const files = Font.WEB_FONT_FILES;\n      for (const fontName in files) {\n        const fontPath = files[fontName];\n        Font.loadWebFont(fontName, host + fontPath);\n      }\n    });\n  }\n  static load(fontName, data, metrics) {\n    let font = Fonts[fontName];\n    if (!font) {\n      font = new Font(fontName);\n      Fonts[fontName] = font;\n    }\n    if (data) {\n      font.setData(data);\n    }\n    if (metrics) {\n      font.setMetrics(metrics);\n    }\n    return font;\n  }\n  constructor(fontName) {\n    this.name = fontName;\n  }\n  getName() {\n    return this.name;\n  }\n  getData() {\n    return defined(this.data, 'FontError', 'Missing font data');\n  }\n  getMetrics() {\n    return defined(this.metrics, 'FontError', 'Missing metrics');\n  }\n  setData(data) {\n    this.data = data;\n  }\n  setMetrics(metrics) {\n    this.metrics = metrics;\n  }\n  hasData() {\n    return this.data !== undefined;\n  }\n  getResolution() {\n    return this.getData().resolution;\n  }\n  getGlyphs() {\n    return this.getData().glyphs;\n  }\n  lookupMetric(key, defaultValue) {\n    const keyParts = key.split('.');\n    let currObj = this.getMetrics();\n    for (let i = 0; i < keyParts.length; i++) {\n      const keyPart = keyParts[i];\n      const value = currObj[keyPart];\n      if (value === undefined) {\n        return defaultValue;\n      }\n      currObj = value;\n    }\n    return currObj;\n  }\n  toString() {\n    return '[' + this.name + ' Font]';\n  }\n}\nFont.SANS_SERIF = 'Arial, sans-serif';\nFont.SERIF = 'Times New Roman, serif';\nFont.SIZE = 10;\nFont.scaleToPxFrom = {\n  pt: 4 / 3,\n  px: 1,\n  em: 16,\n  '%': 4 / 25,\n  in: 96,\n  mm: 96 / 25.4,\n  cm: 96 / 2.54\n};\nFont.WEB_FONT_HOST = 'https://unpkg.com/vexflow-fonts@1.0.3/';\nFont.WEB_FONT_FILES = {\n  'Roboto Slab': 'robotoslab/RobotoSlab-Medium_2.001.woff',\n  PetalumaScript: 'petaluma/PetalumaScript_1.10_FS.woff'\n};\nexport { Font };","map":{"version":3,"names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","defined","FontWeight","FontStyle","fontParser","Fonts","Font","convertSizeToPixelValue","fontSize","SIZE","_a","scaleToPxFrom","pt","parseFloat","isNaN","unit","replace","toLowerCase","conversionFactor","convertSizeToPointValue","validate","f","size","weight","style","undefined","fromCSSString","family","SANS_SERIF","NORMAL","toString","cssFontShorthand","document","createElement","font","fontFamily","fontWeight","fontStyle","toCSSString","fontInfo","st","trim","wt","sz","scaleSize","scaleFactor","isBold","parsedWeight","parseInt","isItalic","ITALIC","loadWebFont","fontName","woffURL","includeWoff2","woff2URL","woff1URL","woffURLs","fontFace","FontFace","load","fonts","add","loadWebFonts","host","WEB_FONT_HOST","files","WEB_FONT_FILES","fontPath","data","metrics","setData","setMetrics","constructor","name","getName","getData","getMetrics","hasData","getResolution","resolution","getGlyphs","glyphs","lookupMetric","key","defaultValue","keyParts","split","currObj","i","length","keyPart","SERIF","px","em","in","mm","cm","PetalumaScript"],"sources":["/Users/longgongmeishi/projects/yixian/music-notation-app/node_modules/vexflow/build/esm/src/font.js"],"sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { defined } from './util.js';\nexport var FontWeight;\n(function (FontWeight) {\n    FontWeight[\"NORMAL\"] = \"normal\";\n    FontWeight[\"BOLD\"] = \"bold\";\n})(FontWeight || (FontWeight = {}));\nexport var FontStyle;\n(function (FontStyle) {\n    FontStyle[\"NORMAL\"] = \"normal\";\n    FontStyle[\"ITALIC\"] = \"italic\";\n})(FontStyle || (FontStyle = {}));\nlet fontParser;\nconst Fonts = {};\nclass Font {\n    static convertSizeToPixelValue(fontSize = Font.SIZE) {\n        var _a;\n        if (typeof fontSize === 'number') {\n            return fontSize * Font.scaleToPxFrom.pt;\n        }\n        else {\n            const value = parseFloat(fontSize);\n            if (isNaN(value)) {\n                return 0;\n            }\n            const unit = fontSize.replace(/[\\d.\\s]/g, '').toLowerCase();\n            const conversionFactor = (_a = Font.scaleToPxFrom[unit]) !== null && _a !== void 0 ? _a : 1;\n            return value * conversionFactor;\n        }\n    }\n    static convertSizeToPointValue(fontSize = Font.SIZE) {\n        var _a;\n        if (typeof fontSize === 'number') {\n            return fontSize;\n        }\n        else {\n            const value = parseFloat(fontSize);\n            if (isNaN(value)) {\n                return 0;\n            }\n            const unit = fontSize.replace(/[\\d.\\s]/g, '').toLowerCase();\n            const conversionFactor = ((_a = Font.scaleToPxFrom[unit]) !== null && _a !== void 0 ? _a : 1) / Font.scaleToPxFrom.pt;\n            return value * conversionFactor;\n        }\n    }\n    static validate(f, size, weight, style) {\n        if (typeof f === 'string' && size === undefined && weight === undefined && style === undefined) {\n            return Font.fromCSSString(f);\n        }\n        let family;\n        if (typeof f === 'object') {\n            family = f.family;\n            size = f.size;\n            weight = f.weight;\n            style = f.style;\n        }\n        else {\n            family = f;\n        }\n        family = family !== null && family !== void 0 ? family : Font.SANS_SERIF;\n        size = size !== null && size !== void 0 ? size : Font.SIZE + 'pt';\n        weight = weight !== null && weight !== void 0 ? weight : FontWeight.NORMAL;\n        style = style !== null && style !== void 0 ? style : FontStyle.NORMAL;\n        if (weight === '') {\n            weight = FontWeight.NORMAL;\n        }\n        if (style === '') {\n            style = FontStyle.NORMAL;\n        }\n        if (typeof size === 'number') {\n            size = `${size}pt`;\n        }\n        if (typeof weight === 'number') {\n            weight = weight.toString();\n        }\n        return { family, size, weight, style };\n    }\n    static fromCSSString(cssFontShorthand) {\n        if (!fontParser) {\n            fontParser = document.createElement('span');\n        }\n        fontParser.style.font = cssFontShorthand;\n        const { fontFamily, fontSize, fontWeight, fontStyle } = fontParser.style;\n        return { family: fontFamily, size: fontSize, weight: fontWeight, style: fontStyle };\n    }\n    static toCSSString(fontInfo) {\n        var _a;\n        if (!fontInfo) {\n            return '';\n        }\n        let style;\n        const st = fontInfo.style;\n        if (st === FontStyle.NORMAL || st === '' || st === undefined) {\n            style = '';\n        }\n        else {\n            style = st.trim() + ' ';\n        }\n        let weight;\n        const wt = fontInfo.weight;\n        if (wt === FontWeight.NORMAL || wt === '' || wt === undefined) {\n            weight = '';\n        }\n        else if (typeof wt === 'number') {\n            weight = wt + ' ';\n        }\n        else {\n            weight = wt.trim() + ' ';\n        }\n        let size;\n        const sz = fontInfo.size;\n        if (sz === undefined) {\n            size = Font.SIZE + 'pt ';\n        }\n        else if (typeof sz === 'number') {\n            size = sz + 'pt ';\n        }\n        else {\n            size = sz.trim() + ' ';\n        }\n        const family = (_a = fontInfo.family) !== null && _a !== void 0 ? _a : Font.SANS_SERIF;\n        return `${style}${weight}${size}${family}`;\n    }\n    static scaleSize(fontSize, scaleFactor) {\n        if (typeof fontSize === 'number') {\n            return (fontSize * scaleFactor);\n        }\n        else {\n            const value = parseFloat(fontSize);\n            const unit = fontSize.replace(/[\\d.\\s]/g, '');\n            return `${value * scaleFactor}${unit}`;\n        }\n    }\n    static isBold(weight) {\n        if (!weight) {\n            return false;\n        }\n        else if (typeof weight === 'number') {\n            return weight >= 600;\n        }\n        else {\n            const parsedWeight = parseInt(weight, 10);\n            if (isNaN(parsedWeight)) {\n                return weight.toLowerCase() === 'bold';\n            }\n            else {\n                return parsedWeight >= 600;\n            }\n        }\n    }\n    static isItalic(style) {\n        if (!style) {\n            return false;\n        }\n        else {\n            return style.toLowerCase() === FontStyle.ITALIC;\n        }\n    }\n    static loadWebFont(fontName, woffURL, includeWoff2 = true) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const woff2URL = includeWoff2 ? `url(${woffURL}2) format('woff2'), ` : '';\n            const woff1URL = `url(${woffURL}) format('woff')`;\n            const woffURLs = woff2URL + woff1URL;\n            const fontFace = new FontFace(fontName, woffURLs);\n            yield fontFace.load();\n            document.fonts.add(fontFace);\n            return fontFace;\n        });\n    }\n    static loadWebFonts() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const host = Font.WEB_FONT_HOST;\n            const files = Font.WEB_FONT_FILES;\n            for (const fontName in files) {\n                const fontPath = files[fontName];\n                Font.loadWebFont(fontName, host + fontPath);\n            }\n        });\n    }\n    static load(fontName, data, metrics) {\n        let font = Fonts[fontName];\n        if (!font) {\n            font = new Font(fontName);\n            Fonts[fontName] = font;\n        }\n        if (data) {\n            font.setData(data);\n        }\n        if (metrics) {\n            font.setMetrics(metrics);\n        }\n        return font;\n    }\n    constructor(fontName) {\n        this.name = fontName;\n    }\n    getName() {\n        return this.name;\n    }\n    getData() {\n        return defined(this.data, 'FontError', 'Missing font data');\n    }\n    getMetrics() {\n        return defined(this.metrics, 'FontError', 'Missing metrics');\n    }\n    setData(data) {\n        this.data = data;\n    }\n    setMetrics(metrics) {\n        this.metrics = metrics;\n    }\n    hasData() {\n        return this.data !== undefined;\n    }\n    getResolution() {\n        return this.getData().resolution;\n    }\n    getGlyphs() {\n        return this.getData().glyphs;\n    }\n    lookupMetric(key, defaultValue) {\n        const keyParts = key.split('.');\n        let currObj = this.getMetrics();\n        for (let i = 0; i < keyParts.length; i++) {\n            const keyPart = keyParts[i];\n            const value = currObj[keyPart];\n            if (value === undefined) {\n                return defaultValue;\n            }\n            currObj = value;\n        }\n        return currObj;\n    }\n    toString() {\n        return '[' + this.name + ' Font]';\n    }\n}\nFont.SANS_SERIF = 'Arial, sans-serif';\nFont.SERIF = 'Times New Roman, serif';\nFont.SIZE = 10;\nFont.scaleToPxFrom = {\n    pt: 4 / 3,\n    px: 1,\n    em: 16,\n    '%': 4 / 25,\n    in: 96,\n    mm: 96 / 25.4,\n    cm: 96 / 2.54,\n};\nFont.WEB_FONT_HOST = 'https://unpkg.com/vexflow-fonts@1.0.3/';\nFont.WEB_FONT_FILES = {\n    'Roboto Slab': 'robotoslab/RobotoSlab-Medium_2.001.woff',\n    PetalumaScript: 'petaluma/PetalumaScript_1.10_FS.woff',\n};\nexport { Font };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}