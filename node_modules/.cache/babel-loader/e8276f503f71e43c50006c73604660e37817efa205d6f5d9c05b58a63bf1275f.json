{"ast":null,"code":"import { Element } from './element.js';\nimport { Font, FontStyle, FontWeight } from './font.js';\nimport { Glyph } from './glyph.js';\nimport { Tables } from './tables.js';\nimport { RuntimeError } from './util.js';\nfunction drawBoldDoubleLine(ctx, type, topX, topY, botY) {\n  if (type !== StaveConnector.type.BOLD_DOUBLE_LEFT && type !== StaveConnector.type.BOLD_DOUBLE_RIGHT) {\n    throw new RuntimeError('InvalidConnector', 'A REPEAT_BEGIN or REPEAT_END type must be provided.');\n  }\n  let x_shift = 3;\n  let variableWidth = 3.5;\n  const thickLineOffset = 2;\n  if (type === StaveConnector.type.BOLD_DOUBLE_RIGHT) {\n    x_shift = -5;\n    variableWidth = 3;\n  }\n  ctx.fillRect(topX + x_shift, topY, 1, botY - topY);\n  ctx.fillRect(topX - thickLineOffset, topY, variableWidth, botY - topY);\n}\nclass StaveConnector extends Element {\n  static get CATEGORY() {\n    return \"StaveConnector\";\n  }\n  constructor(top_stave, bottom_stave) {\n    super();\n    this.thickness = Tables.STAVE_LINE_THICKNESS;\n    this.width = 3;\n    this.top_stave = top_stave;\n    this.bottom_stave = bottom_stave;\n    this.type = StaveConnector.type.DOUBLE;\n    this.resetFont();\n    this.x_shift = 0;\n    this.texts = [];\n  }\n  setType(type) {\n    const newType = typeof type === 'string' ? StaveConnector.typeString[type] : type;\n    if (Object.values(StaveConnector.type).includes(newType)) {\n      this.type = newType;\n    }\n    return this;\n  }\n  getType() {\n    return this.type;\n  }\n  setText(text, options = {}) {\n    this.texts.push({\n      content: text,\n      options: Object.assign({\n        shift_x: 0,\n        shift_y: 0\n      }, options)\n    });\n    return this;\n  }\n  setXShift(x_shift) {\n    if (typeof x_shift !== 'number') {\n      throw new RuntimeError('InvalidType', 'x_shift must be a Number');\n    }\n    this.x_shift = x_shift;\n    return this;\n  }\n  getXShift() {\n    return this.x_shift;\n  }\n  draw() {\n    const ctx = this.checkContext();\n    this.setRendered();\n    let topY = this.top_stave.getYForLine(0);\n    let botY = this.bottom_stave.getYForLine(this.bottom_stave.getNumLines() - 1) + this.thickness;\n    let width = this.width;\n    let topX = this.top_stave.getX();\n    const isRightSidedConnector = this.type === StaveConnector.type.SINGLE_RIGHT || this.type === StaveConnector.type.BOLD_DOUBLE_RIGHT || this.type === StaveConnector.type.THIN_DOUBLE;\n    if (isRightSidedConnector) {\n      topX = this.top_stave.getX() + this.top_stave.getWidth();\n    }\n    let attachment_height = botY - topY;\n    switch (this.type) {\n      case StaveConnector.type.SINGLE:\n        width = 1;\n        break;\n      case StaveConnector.type.SINGLE_LEFT:\n        width = 1;\n        break;\n      case StaveConnector.type.SINGLE_RIGHT:\n        width = 1;\n        break;\n      case StaveConnector.type.DOUBLE:\n        topX -= this.width + 2;\n        topY -= this.thickness;\n        attachment_height += 0.5;\n        break;\n      case StaveConnector.type.BRACE:\n        {\n          width = 12;\n          const x1 = this.top_stave.getX() - 2 + this.x_shift;\n          const y1 = topY;\n          const x3 = x1;\n          const y3 = botY;\n          const x2 = x1 - width;\n          const y2 = y1 + attachment_height / 2.0;\n          const cpx1 = x2 - 0.9 * width;\n          const cpy1 = y1 + 0.2 * attachment_height;\n          const cpx2 = x1 + 1.1 * width;\n          const cpy2 = y2 - 0.135 * attachment_height;\n          const cpx3 = cpx2;\n          const cpy3 = y2 + 0.135 * attachment_height;\n          const cpx4 = cpx1;\n          const cpy4 = y3 - 0.2 * attachment_height;\n          const cpx5 = x2 - width;\n          const cpy5 = cpy4;\n          const cpx6 = x1 + 0.4 * width;\n          const cpy6 = y2 + 0.135 * attachment_height;\n          const cpx7 = cpx6;\n          const cpy7 = y2 - 0.135 * attachment_height;\n          const cpx8 = cpx5;\n          const cpy8 = cpy1;\n          ctx.beginPath();\n          ctx.moveTo(x1, y1);\n          ctx.bezierCurveTo(cpx1, cpy1, cpx2, cpy2, x2, y2);\n          ctx.bezierCurveTo(cpx3, cpy3, cpx4, cpy4, x3, y3);\n          ctx.bezierCurveTo(cpx5, cpy5, cpx6, cpy6, x2, y2);\n          ctx.bezierCurveTo(cpx7, cpy7, cpx8, cpy8, x1, y1);\n          ctx.fill();\n          ctx.stroke();\n          break;\n        }\n      case StaveConnector.type.BRACKET:\n        topY -= 6;\n        botY += 6;\n        attachment_height = botY - topY;\n        Glyph.renderGlyph(ctx, topX - 5, topY, 40, 'bracketTop');\n        Glyph.renderGlyph(ctx, topX - 5, botY, 40, 'bracketBottom');\n        topX -= this.width + 2;\n        break;\n      case StaveConnector.type.BOLD_DOUBLE_LEFT:\n        drawBoldDoubleLine(ctx, this.type, topX + this.x_shift, topY, botY - this.thickness);\n        break;\n      case StaveConnector.type.BOLD_DOUBLE_RIGHT:\n        drawBoldDoubleLine(ctx, this.type, topX, topY, botY - this.thickness);\n        break;\n      case StaveConnector.type.THIN_DOUBLE:\n        width = 1;\n        attachment_height -= this.thickness;\n        break;\n      case StaveConnector.type.NONE:\n        break;\n      default:\n        throw new RuntimeError('InvalidType', `The provided StaveConnector.type (${this.type}) is invalid.`);\n    }\n    if (this.type !== StaveConnector.type.BRACE && this.type !== StaveConnector.type.BOLD_DOUBLE_LEFT && this.type !== StaveConnector.type.BOLD_DOUBLE_RIGHT && this.type !== StaveConnector.type.NONE) {\n      ctx.fillRect(topX, topY, width, attachment_height);\n    }\n    if (this.type === StaveConnector.type.THIN_DOUBLE) {\n      ctx.fillRect(topX - 3, topY, width, attachment_height);\n    }\n    ctx.save();\n    ctx.setLineWidth(2);\n    ctx.setFont(this.textFont);\n    for (let i = 0; i < this.texts.length; i++) {\n      const text = this.texts[i];\n      const text_width = ctx.measureText('' + text.content).width;\n      const x = this.top_stave.getX() - text_width - 24 + text.options.shift_x;\n      const y = (this.top_stave.getYForLine(0) + this.bottom_stave.getBottomLineY()) / 2 + text.options.shift_y;\n      ctx.fillText('' + text.content, x, y + 4);\n    }\n    ctx.restore();\n  }\n}\nStaveConnector.TEXT_FONT = {\n  family: Font.SERIF,\n  size: 16,\n  weight: FontWeight.NORMAL,\n  style: FontStyle.NORMAL\n};\nStaveConnector.type = {\n  SINGLE_RIGHT: 0,\n  SINGLE_LEFT: 1,\n  SINGLE: 1,\n  DOUBLE: 2,\n  BRACE: 3,\n  BRACKET: 4,\n  BOLD_DOUBLE_LEFT: 5,\n  BOLD_DOUBLE_RIGHT: 6,\n  THIN_DOUBLE: 7,\n  NONE: 8\n};\nStaveConnector.typeString = {\n  singleRight: StaveConnector.type.SINGLE_RIGHT,\n  singleLeft: StaveConnector.type.SINGLE_LEFT,\n  single: StaveConnector.type.SINGLE,\n  double: StaveConnector.type.DOUBLE,\n  brace: StaveConnector.type.BRACE,\n  bracket: StaveConnector.type.BRACKET,\n  boldDoubleLeft: StaveConnector.type.BOLD_DOUBLE_LEFT,\n  boldDoubleRight: StaveConnector.type.BOLD_DOUBLE_RIGHT,\n  thinDouble: StaveConnector.type.THIN_DOUBLE,\n  none: StaveConnector.type.NONE\n};\nexport { StaveConnector };","map":{"version":3,"names":["Element","Font","FontStyle","FontWeight","Glyph","Tables","RuntimeError","drawBoldDoubleLine","ctx","type","topX","topY","botY","StaveConnector","BOLD_DOUBLE_LEFT","BOLD_DOUBLE_RIGHT","x_shift","variableWidth","thickLineOffset","fillRect","CATEGORY","constructor","top_stave","bottom_stave","thickness","STAVE_LINE_THICKNESS","width","DOUBLE","resetFont","texts","setType","newType","typeString","Object","values","includes","getType","setText","text","options","push","content","assign","shift_x","shift_y","setXShift","getXShift","draw","checkContext","setRendered","getYForLine","getNumLines","getX","isRightSidedConnector","SINGLE_RIGHT","THIN_DOUBLE","getWidth","attachment_height","SINGLE","SINGLE_LEFT","BRACE","x1","y1","x3","y3","x2","y2","cpx1","cpy1","cpx2","cpy2","cpx3","cpy3","cpx4","cpy4","cpx5","cpy5","cpx6","cpy6","cpx7","cpy7","cpx8","cpy8","beginPath","moveTo","bezierCurveTo","fill","stroke","BRACKET","renderGlyph","NONE","save","setLineWidth","setFont","textFont","i","length","text_width","measureText","x","y","getBottomLineY","fillText","restore","TEXT_FONT","family","SERIF","size","weight","NORMAL","style","singleRight","singleLeft","single","double","brace","bracket","boldDoubleLeft","boldDoubleRight","thinDouble","none"],"sources":["/Users/longgongmeishi/projects/yixian/music-notation-app/node_modules/vexflow/build/esm/src/staveconnector.js"],"sourcesContent":["import { Element } from './element.js';\nimport { Font, FontStyle, FontWeight } from './font.js';\nimport { Glyph } from './glyph.js';\nimport { Tables } from './tables.js';\nimport { RuntimeError } from './util.js';\nfunction drawBoldDoubleLine(ctx, type, topX, topY, botY) {\n    if (type !== StaveConnector.type.BOLD_DOUBLE_LEFT && type !== StaveConnector.type.BOLD_DOUBLE_RIGHT) {\n        throw new RuntimeError('InvalidConnector', 'A REPEAT_BEGIN or REPEAT_END type must be provided.');\n    }\n    let x_shift = 3;\n    let variableWidth = 3.5;\n    const thickLineOffset = 2;\n    if (type === StaveConnector.type.BOLD_DOUBLE_RIGHT) {\n        x_shift = -5;\n        variableWidth = 3;\n    }\n    ctx.fillRect(topX + x_shift, topY, 1, botY - topY);\n    ctx.fillRect(topX - thickLineOffset, topY, variableWidth, botY - topY);\n}\nclass StaveConnector extends Element {\n    static get CATEGORY() {\n        return \"StaveConnector\";\n    }\n    constructor(top_stave, bottom_stave) {\n        super();\n        this.thickness = Tables.STAVE_LINE_THICKNESS;\n        this.width = 3;\n        this.top_stave = top_stave;\n        this.bottom_stave = bottom_stave;\n        this.type = StaveConnector.type.DOUBLE;\n        this.resetFont();\n        this.x_shift = 0;\n        this.texts = [];\n    }\n    setType(type) {\n        const newType = typeof type === 'string' ? StaveConnector.typeString[type] : type;\n        if (Object.values(StaveConnector.type).includes(newType)) {\n            this.type = newType;\n        }\n        return this;\n    }\n    getType() {\n        return this.type;\n    }\n    setText(text, options = {}) {\n        this.texts.push({\n            content: text,\n            options: Object.assign({ shift_x: 0, shift_y: 0 }, options),\n        });\n        return this;\n    }\n    setXShift(x_shift) {\n        if (typeof x_shift !== 'number') {\n            throw new RuntimeError('InvalidType', 'x_shift must be a Number');\n        }\n        this.x_shift = x_shift;\n        return this;\n    }\n    getXShift() {\n        return this.x_shift;\n    }\n    draw() {\n        const ctx = this.checkContext();\n        this.setRendered();\n        let topY = this.top_stave.getYForLine(0);\n        let botY = this.bottom_stave.getYForLine(this.bottom_stave.getNumLines() - 1) + this.thickness;\n        let width = this.width;\n        let topX = this.top_stave.getX();\n        const isRightSidedConnector = this.type === StaveConnector.type.SINGLE_RIGHT ||\n            this.type === StaveConnector.type.BOLD_DOUBLE_RIGHT ||\n            this.type === StaveConnector.type.THIN_DOUBLE;\n        if (isRightSidedConnector) {\n            topX = this.top_stave.getX() + this.top_stave.getWidth();\n        }\n        let attachment_height = botY - topY;\n        switch (this.type) {\n            case StaveConnector.type.SINGLE:\n                width = 1;\n                break;\n            case StaveConnector.type.SINGLE_LEFT:\n                width = 1;\n                break;\n            case StaveConnector.type.SINGLE_RIGHT:\n                width = 1;\n                break;\n            case StaveConnector.type.DOUBLE:\n                topX -= this.width + 2;\n                topY -= this.thickness;\n                attachment_height += 0.5;\n                break;\n            case StaveConnector.type.BRACE: {\n                width = 12;\n                const x1 = this.top_stave.getX() - 2 + this.x_shift;\n                const y1 = topY;\n                const x3 = x1;\n                const y3 = botY;\n                const x2 = x1 - width;\n                const y2 = y1 + attachment_height / 2.0;\n                const cpx1 = x2 - 0.9 * width;\n                const cpy1 = y1 + 0.2 * attachment_height;\n                const cpx2 = x1 + 1.1 * width;\n                const cpy2 = y2 - 0.135 * attachment_height;\n                const cpx3 = cpx2;\n                const cpy3 = y2 + 0.135 * attachment_height;\n                const cpx4 = cpx1;\n                const cpy4 = y3 - 0.2 * attachment_height;\n                const cpx5 = x2 - width;\n                const cpy5 = cpy4;\n                const cpx6 = x1 + 0.4 * width;\n                const cpy6 = y2 + 0.135 * attachment_height;\n                const cpx7 = cpx6;\n                const cpy7 = y2 - 0.135 * attachment_height;\n                const cpx8 = cpx5;\n                const cpy8 = cpy1;\n                ctx.beginPath();\n                ctx.moveTo(x1, y1);\n                ctx.bezierCurveTo(cpx1, cpy1, cpx2, cpy2, x2, y2);\n                ctx.bezierCurveTo(cpx3, cpy3, cpx4, cpy4, x3, y3);\n                ctx.bezierCurveTo(cpx5, cpy5, cpx6, cpy6, x2, y2);\n                ctx.bezierCurveTo(cpx7, cpy7, cpx8, cpy8, x1, y1);\n                ctx.fill();\n                ctx.stroke();\n                break;\n            }\n            case StaveConnector.type.BRACKET:\n                topY -= 6;\n                botY += 6;\n                attachment_height = botY - topY;\n                Glyph.renderGlyph(ctx, topX - 5, topY, 40, 'bracketTop');\n                Glyph.renderGlyph(ctx, topX - 5, botY, 40, 'bracketBottom');\n                topX -= this.width + 2;\n                break;\n            case StaveConnector.type.BOLD_DOUBLE_LEFT:\n                drawBoldDoubleLine(ctx, this.type, topX + this.x_shift, topY, botY - this.thickness);\n                break;\n            case StaveConnector.type.BOLD_DOUBLE_RIGHT:\n                drawBoldDoubleLine(ctx, this.type, topX, topY, botY - this.thickness);\n                break;\n            case StaveConnector.type.THIN_DOUBLE:\n                width = 1;\n                attachment_height -= this.thickness;\n                break;\n            case StaveConnector.type.NONE:\n                break;\n            default:\n                throw new RuntimeError('InvalidType', `The provided StaveConnector.type (${this.type}) is invalid.`);\n        }\n        if (this.type !== StaveConnector.type.BRACE &&\n            this.type !== StaveConnector.type.BOLD_DOUBLE_LEFT &&\n            this.type !== StaveConnector.type.BOLD_DOUBLE_RIGHT &&\n            this.type !== StaveConnector.type.NONE) {\n            ctx.fillRect(topX, topY, width, attachment_height);\n        }\n        if (this.type === StaveConnector.type.THIN_DOUBLE) {\n            ctx.fillRect(topX - 3, topY, width, attachment_height);\n        }\n        ctx.save();\n        ctx.setLineWidth(2);\n        ctx.setFont(this.textFont);\n        for (let i = 0; i < this.texts.length; i++) {\n            const text = this.texts[i];\n            const text_width = ctx.measureText('' + text.content).width;\n            const x = this.top_stave.getX() - text_width - 24 + text.options.shift_x;\n            const y = (this.top_stave.getYForLine(0) + this.bottom_stave.getBottomLineY()) / 2 + text.options.shift_y;\n            ctx.fillText('' + text.content, x, y + 4);\n        }\n        ctx.restore();\n    }\n}\nStaveConnector.TEXT_FONT = {\n    family: Font.SERIF,\n    size: 16,\n    weight: FontWeight.NORMAL,\n    style: FontStyle.NORMAL,\n};\nStaveConnector.type = {\n    SINGLE_RIGHT: 0,\n    SINGLE_LEFT: 1,\n    SINGLE: 1,\n    DOUBLE: 2,\n    BRACE: 3,\n    BRACKET: 4,\n    BOLD_DOUBLE_LEFT: 5,\n    BOLD_DOUBLE_RIGHT: 6,\n    THIN_DOUBLE: 7,\n    NONE: 8,\n};\nStaveConnector.typeString = {\n    singleRight: StaveConnector.type.SINGLE_RIGHT,\n    singleLeft: StaveConnector.type.SINGLE_LEFT,\n    single: StaveConnector.type.SINGLE,\n    double: StaveConnector.type.DOUBLE,\n    brace: StaveConnector.type.BRACE,\n    bracket: StaveConnector.type.BRACKET,\n    boldDoubleLeft: StaveConnector.type.BOLD_DOUBLE_LEFT,\n    boldDoubleRight: StaveConnector.type.BOLD_DOUBLE_RIGHT,\n    thinDouble: StaveConnector.type.THIN_DOUBLE,\n    none: StaveConnector.type.NONE,\n};\nexport { StaveConnector };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}