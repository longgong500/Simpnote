{"ast":null,"code":"import { Element } from './element.js';\nimport { Formatter } from './formatter.js';\nimport { Glyph } from './glyph.js';\nimport { Stem } from './stem.js';\nimport { Tables } from './tables.js';\nimport { defined, RuntimeError } from './util.js';\nexport class Tuplet extends Element {\n  static get CATEGORY() {\n    return \"Tuplet\";\n  }\n  static get LOCATION_TOP() {\n    return 1;\n  }\n  static get LOCATION_BOTTOM() {\n    return -1;\n  }\n  static get NESTING_OFFSET() {\n    return 15;\n  }\n  static get metrics() {\n    const tupletMetrics = Tables.currentMusicFont().getMetrics().tuplet;\n    if (!tupletMetrics) throw new RuntimeError('BadMetrics', `tuplet missing`);\n    return tupletMetrics;\n  }\n  constructor(notes, options = {}) {\n    super();\n    this.numerator_glyphs = [];\n    this.denom_glyphs = [];\n    if (!notes || !notes.length) {\n      throw new RuntimeError('BadArguments', 'No notes provided for tuplet.');\n    }\n    this.options = options;\n    this.notes = notes;\n    this.num_notes = this.options.num_notes != undefined ? this.options.num_notes : notes.length;\n    if (this.options.beats_occupied) {\n      this.beatsOccupiedDeprecationWarning();\n    }\n    this.notes_occupied = this.options.notes_occupied || this.options.beats_occupied || 2;\n    if (this.options.bracketed != undefined) {\n      this.bracketed = this.options.bracketed;\n    } else {\n      this.bracketed = notes.some(note => !note.hasBeam());\n    }\n    this.ratioed = this.options.ratioed != undefined ? this.options.ratioed : Math.abs(this.notes_occupied - this.num_notes) > 1;\n    this.point = Tables.NOTATION_FONT_SCALE * 3 / 5;\n    this.y_pos = 16;\n    this.x_pos = 100;\n    this.width = 200;\n    this.setTupletLocation(this.options.location || Tuplet.LOCATION_TOP);\n    Formatter.AlignRestsToNotes(notes, true, true);\n    this.resolveGlyphs();\n    this.attach();\n  }\n  attach() {\n    for (let i = 0; i < this.notes.length; i++) {\n      const note = this.notes[i];\n      note.setTuplet(this);\n    }\n  }\n  detach() {\n    for (let i = 0; i < this.notes.length; i++) {\n      const note = this.notes[i];\n      note.resetTuplet(this);\n    }\n  }\n  setBracketed(bracketed) {\n    this.bracketed = !!bracketed;\n    return this;\n  }\n  setRatioed(ratioed) {\n    this.ratioed = !!ratioed;\n    return this;\n  }\n  setTupletLocation(location) {\n    if (location !== Tuplet.LOCATION_TOP && location !== Tuplet.LOCATION_BOTTOM) {\n      console.warn(`Invalid tuplet location [${location}]. Using Tuplet.LOCATION_TOP.`);\n      location = Tuplet.LOCATION_TOP;\n    }\n    this.location = location;\n    return this;\n  }\n  getNotes() {\n    return this.notes;\n  }\n  getNoteCount() {\n    return this.num_notes;\n  }\n  beatsOccupiedDeprecationWarning() {\n    console.warn('beats_occupied has been deprecated as an option for tuplets. Please use notes_occupied instead.', 'Calls to getBeatsOccupied / setBeatsOccupied should now be routed to getNotesOccupied / setNotesOccupied.', 'The old methods will be removed in VexFlow 5.0.');\n  }\n  getBeatsOccupied() {\n    this.beatsOccupiedDeprecationWarning();\n    return this.getNotesOccupied();\n  }\n  setBeatsOccupied(beats) {\n    this.beatsOccupiedDeprecationWarning();\n    return this.setNotesOccupied(beats);\n  }\n  getNotesOccupied() {\n    return this.notes_occupied;\n  }\n  setNotesOccupied(notes) {\n    this.detach();\n    this.notes_occupied = notes;\n    this.resolveGlyphs();\n    this.attach();\n  }\n  resolveGlyphs() {\n    this.numerator_glyphs = [];\n    let n = this.num_notes;\n    while (n >= 1) {\n      this.numerator_glyphs.unshift(new Glyph('timeSig' + n % 10, this.point));\n      n = parseInt((n / 10).toString(), 10);\n    }\n    this.denom_glyphs = [];\n    n = this.notes_occupied;\n    while (n >= 1) {\n      this.denom_glyphs.unshift(new Glyph('timeSig' + n % 10, this.point));\n      n = parseInt((n / 10).toString(), 10);\n    }\n  }\n  getNestedTupletCount() {\n    const location = this.location;\n    const first_note = this.notes[0];\n    let maxTupletCount = countTuplets(first_note, location);\n    let minTupletCount = countTuplets(first_note, location);\n    function countTuplets(note, location) {\n      return note.getTupletStack().filter(tuplet => tuplet.location === location).length;\n    }\n    this.notes.forEach(note => {\n      const tupletCount = countTuplets(note, location);\n      maxTupletCount = tupletCount > maxTupletCount ? tupletCount : maxTupletCount;\n      minTupletCount = tupletCount < minTupletCount ? tupletCount : minTupletCount;\n    });\n    return maxTupletCount - minTupletCount;\n  }\n  getYPosition() {\n    const nested_tuplet_y_offset = this.getNestedTupletCount() * Tuplet.NESTING_OFFSET * -this.location;\n    const y_offset = this.options.y_offset || 0;\n    const first_note = this.notes[0];\n    let y_pos;\n    if (this.location === Tuplet.LOCATION_TOP) {\n      y_pos = first_note.checkStave().getYForLine(0) - Tuplet.metrics.topModifierOffset;\n      for (let i = 0; i < this.notes.length; ++i) {\n        const note = this.notes[i];\n        let modLines = 0;\n        const mc = note.getModifierContext();\n        if (mc) {\n          modLines = Math.max(modLines, mc.getState().top_text_line);\n        }\n        const modY = note.getYForTopText(modLines) - Tuplet.metrics.noteHeadOffset;\n        if (note.hasStem() || note.isRest()) {\n          const top_y = note.getStemDirection() === Stem.UP ? note.getStemExtents().topY - Tuplet.metrics.stemOffset : note.getStemExtents().baseY - Tuplet.metrics.noteHeadOffset;\n          y_pos = Math.min(top_y, y_pos);\n          if (modLines > 0) {\n            y_pos = Math.min(modY, y_pos);\n          }\n        }\n      }\n    } else {\n      let lineCheck = Tuplet.metrics.bottomLine;\n      this.notes.forEach(nn => {\n        const mc = nn.getModifierContext();\n        if (mc) {\n          lineCheck = Math.max(lineCheck, mc.getState().text_line + 1);\n        }\n      });\n      y_pos = first_note.checkStave().getYForLine(lineCheck) + Tuplet.metrics.noteHeadOffset;\n      for (let i = 0; i < this.notes.length; ++i) {\n        if (this.notes[i].hasStem() || this.notes[i].isRest()) {\n          const bottom_y = this.notes[i].getStemDirection() === Stem.UP ? this.notes[i].getStemExtents().baseY + Tuplet.metrics.noteHeadOffset : this.notes[i].getStemExtents().topY + Tuplet.metrics.stemOffset;\n          if (bottom_y > y_pos) {\n            y_pos = bottom_y;\n          }\n        }\n      }\n    }\n    return y_pos + nested_tuplet_y_offset + y_offset;\n  }\n  draw() {\n    const ctx = this.checkContext();\n    this.setRendered();\n    const first_note = this.notes[0];\n    const last_note = this.notes[this.notes.length - 1];\n    if (!this.bracketed) {\n      this.x_pos = first_note.getStemX();\n      this.width = last_note.getStemX() - this.x_pos;\n    } else {\n      this.x_pos = first_note.getTieLeftX() - 5;\n      this.width = last_note.getTieRightX() - this.x_pos + 5;\n    }\n    this.y_pos = this.getYPosition();\n    const addGlyphWidth = (width, glyph) => width + defined(glyph.getMetrics().width);\n    let width = this.numerator_glyphs.reduce(addGlyphWidth, 0);\n    if (this.ratioed) {\n      width = this.denom_glyphs.reduce(addGlyphWidth, width);\n      width += this.point * 0.32;\n    }\n    const notation_center_x = this.x_pos + this.width / 2;\n    const notation_start_x = notation_center_x - width / 2;\n    if (this.bracketed) {\n      const line_width = this.width / 2 - width / 2 - 5;\n      if (line_width > 0) {\n        ctx.fillRect(this.x_pos, this.y_pos, line_width, 1);\n        ctx.fillRect(this.x_pos + this.width / 2 + width / 2 + 5, this.y_pos, line_width, 1);\n        ctx.fillRect(this.x_pos, this.y_pos + (this.location === Tuplet.LOCATION_BOTTOM ? 1 : 0), 1, this.location * 10);\n        ctx.fillRect(this.x_pos + this.width, this.y_pos + (this.location === Tuplet.LOCATION_BOTTOM ? 1 : 0), 1, this.location * 10);\n      }\n    }\n    const shiftY = Tables.currentMusicFont().lookupMetric('digits.shiftY', 0);\n    let x_offset = 0;\n    this.numerator_glyphs.forEach(glyph => {\n      glyph.render(ctx, notation_start_x + x_offset, this.y_pos + this.point / 3 - 2 + shiftY);\n      x_offset += defined(glyph.getMetrics().width);\n    });\n    if (this.ratioed) {\n      const colon_x = notation_start_x + x_offset + this.point * 0.16;\n      const colon_radius = this.point * 0.06;\n      ctx.beginPath();\n      ctx.arc(colon_x, this.y_pos - this.point * 0.08, colon_radius, 0, Math.PI * 2, false);\n      ctx.closePath();\n      ctx.fill();\n      ctx.beginPath();\n      ctx.arc(colon_x, this.y_pos + this.point * 0.12, colon_radius, 0, Math.PI * 2, false);\n      ctx.closePath();\n      ctx.fill();\n      x_offset += this.point * 0.32;\n      this.denom_glyphs.forEach(glyph => {\n        glyph.render(ctx, notation_start_x + x_offset, this.y_pos + this.point / 3 - 2 + shiftY);\n        x_offset += defined(glyph.getMetrics().width);\n      });\n    }\n  }\n}","map":{"version":3,"names":["Element","Formatter","Glyph","Stem","Tables","defined","RuntimeError","Tuplet","CATEGORY","LOCATION_TOP","LOCATION_BOTTOM","NESTING_OFFSET","metrics","tupletMetrics","currentMusicFont","getMetrics","tuplet","constructor","notes","options","numerator_glyphs","denom_glyphs","length","num_notes","undefined","beats_occupied","beatsOccupiedDeprecationWarning","notes_occupied","bracketed","some","note","hasBeam","ratioed","Math","abs","point","NOTATION_FONT_SCALE","y_pos","x_pos","width","setTupletLocation","location","AlignRestsToNotes","resolveGlyphs","attach","i","setTuplet","detach","resetTuplet","setBracketed","setRatioed","console","warn","getNotes","getNoteCount","getBeatsOccupied","getNotesOccupied","setBeatsOccupied","beats","setNotesOccupied","n","unshift","parseInt","toString","getNestedTupletCount","first_note","maxTupletCount","countTuplets","minTupletCount","getTupletStack","filter","forEach","tupletCount","getYPosition","nested_tuplet_y_offset","y_offset","checkStave","getYForLine","topModifierOffset","modLines","mc","getModifierContext","max","getState","top_text_line","modY","getYForTopText","noteHeadOffset","hasStem","isRest","top_y","getStemDirection","UP","getStemExtents","topY","stemOffset","baseY","min","lineCheck","bottomLine","nn","text_line","bottom_y","draw","ctx","checkContext","setRendered","last_note","getStemX","getTieLeftX","getTieRightX","addGlyphWidth","glyph","reduce","notation_center_x","notation_start_x","line_width","fillRect","shiftY","lookupMetric","x_offset","render","colon_x","colon_radius","beginPath","arc","PI","closePath","fill"],"sources":["/Users/longgongmeishi/projects/yixian/music-notation-app/node_modules/vexflow/build/esm/src/tuplet.js"],"sourcesContent":["import { Element } from './element.js';\nimport { Formatter } from './formatter.js';\nimport { Glyph } from './glyph.js';\nimport { Stem } from './stem.js';\nimport { Tables } from './tables.js';\nimport { defined, RuntimeError } from './util.js';\nexport class Tuplet extends Element {\n    static get CATEGORY() {\n        return \"Tuplet\";\n    }\n    static get LOCATION_TOP() {\n        return 1;\n    }\n    static get LOCATION_BOTTOM() {\n        return -1;\n    }\n    static get NESTING_OFFSET() {\n        return 15;\n    }\n    static get metrics() {\n        const tupletMetrics = Tables.currentMusicFont().getMetrics().tuplet;\n        if (!tupletMetrics)\n            throw new RuntimeError('BadMetrics', `tuplet missing`);\n        return tupletMetrics;\n    }\n    constructor(notes, options = {}) {\n        super();\n        this.numerator_glyphs = [];\n        this.denom_glyphs = [];\n        if (!notes || !notes.length) {\n            throw new RuntimeError('BadArguments', 'No notes provided for tuplet.');\n        }\n        this.options = options;\n        this.notes = notes;\n        this.num_notes = this.options.num_notes != undefined ? this.options.num_notes : notes.length;\n        if (this.options.beats_occupied) {\n            this.beatsOccupiedDeprecationWarning();\n        }\n        this.notes_occupied = this.options.notes_occupied || this.options.beats_occupied || 2;\n        if (this.options.bracketed != undefined) {\n            this.bracketed = this.options.bracketed;\n        }\n        else {\n            this.bracketed = notes.some((note) => !note.hasBeam());\n        }\n        this.ratioed =\n            this.options.ratioed != undefined ? this.options.ratioed : Math.abs(this.notes_occupied - this.num_notes) > 1;\n        this.point = (Tables.NOTATION_FONT_SCALE * 3) / 5;\n        this.y_pos = 16;\n        this.x_pos = 100;\n        this.width = 200;\n        this.setTupletLocation(this.options.location || Tuplet.LOCATION_TOP);\n        Formatter.AlignRestsToNotes(notes, true, true);\n        this.resolveGlyphs();\n        this.attach();\n    }\n    attach() {\n        for (let i = 0; i < this.notes.length; i++) {\n            const note = this.notes[i];\n            note.setTuplet(this);\n        }\n    }\n    detach() {\n        for (let i = 0; i < this.notes.length; i++) {\n            const note = this.notes[i];\n            note.resetTuplet(this);\n        }\n    }\n    setBracketed(bracketed) {\n        this.bracketed = !!bracketed;\n        return this;\n    }\n    setRatioed(ratioed) {\n        this.ratioed = !!ratioed;\n        return this;\n    }\n    setTupletLocation(location) {\n        if (location !== Tuplet.LOCATION_TOP && location !== Tuplet.LOCATION_BOTTOM) {\n            console.warn(`Invalid tuplet location [${location}]. Using Tuplet.LOCATION_TOP.`);\n            location = Tuplet.LOCATION_TOP;\n        }\n        this.location = location;\n        return this;\n    }\n    getNotes() {\n        return this.notes;\n    }\n    getNoteCount() {\n        return this.num_notes;\n    }\n    beatsOccupiedDeprecationWarning() {\n        console.warn('beats_occupied has been deprecated as an option for tuplets. Please use notes_occupied instead.', 'Calls to getBeatsOccupied / setBeatsOccupied should now be routed to getNotesOccupied / setNotesOccupied.', 'The old methods will be removed in VexFlow 5.0.');\n    }\n    getBeatsOccupied() {\n        this.beatsOccupiedDeprecationWarning();\n        return this.getNotesOccupied();\n    }\n    setBeatsOccupied(beats) {\n        this.beatsOccupiedDeprecationWarning();\n        return this.setNotesOccupied(beats);\n    }\n    getNotesOccupied() {\n        return this.notes_occupied;\n    }\n    setNotesOccupied(notes) {\n        this.detach();\n        this.notes_occupied = notes;\n        this.resolveGlyphs();\n        this.attach();\n    }\n    resolveGlyphs() {\n        this.numerator_glyphs = [];\n        let n = this.num_notes;\n        while (n >= 1) {\n            this.numerator_glyphs.unshift(new Glyph('timeSig' + (n % 10), this.point));\n            n = parseInt((n / 10).toString(), 10);\n        }\n        this.denom_glyphs = [];\n        n = this.notes_occupied;\n        while (n >= 1) {\n            this.denom_glyphs.unshift(new Glyph('timeSig' + (n % 10), this.point));\n            n = parseInt((n / 10).toString(), 10);\n        }\n    }\n    getNestedTupletCount() {\n        const location = this.location;\n        const first_note = this.notes[0];\n        let maxTupletCount = countTuplets(first_note, location);\n        let minTupletCount = countTuplets(first_note, location);\n        function countTuplets(note, location) {\n            return note.getTupletStack().filter((tuplet) => tuplet.location === location).length;\n        }\n        this.notes.forEach((note) => {\n            const tupletCount = countTuplets(note, location);\n            maxTupletCount = tupletCount > maxTupletCount ? tupletCount : maxTupletCount;\n            minTupletCount = tupletCount < minTupletCount ? tupletCount : minTupletCount;\n        });\n        return maxTupletCount - minTupletCount;\n    }\n    getYPosition() {\n        const nested_tuplet_y_offset = this.getNestedTupletCount() * Tuplet.NESTING_OFFSET * -this.location;\n        const y_offset = this.options.y_offset || 0;\n        const first_note = this.notes[0];\n        let y_pos;\n        if (this.location === Tuplet.LOCATION_TOP) {\n            y_pos = first_note.checkStave().getYForLine(0) - Tuplet.metrics.topModifierOffset;\n            for (let i = 0; i < this.notes.length; ++i) {\n                const note = this.notes[i];\n                let modLines = 0;\n                const mc = note.getModifierContext();\n                if (mc) {\n                    modLines = Math.max(modLines, mc.getState().top_text_line);\n                }\n                const modY = note.getYForTopText(modLines) - Tuplet.metrics.noteHeadOffset;\n                if (note.hasStem() || note.isRest()) {\n                    const top_y = note.getStemDirection() === Stem.UP\n                        ? note.getStemExtents().topY - Tuplet.metrics.stemOffset\n                        : note.getStemExtents().baseY - Tuplet.metrics.noteHeadOffset;\n                    y_pos = Math.min(top_y, y_pos);\n                    if (modLines > 0) {\n                        y_pos = Math.min(modY, y_pos);\n                    }\n                }\n            }\n        }\n        else {\n            let lineCheck = Tuplet.metrics.bottomLine;\n            this.notes.forEach((nn) => {\n                const mc = nn.getModifierContext();\n                if (mc) {\n                    lineCheck = Math.max(lineCheck, mc.getState().text_line + 1);\n                }\n            });\n            y_pos = first_note.checkStave().getYForLine(lineCheck) + Tuplet.metrics.noteHeadOffset;\n            for (let i = 0; i < this.notes.length; ++i) {\n                if (this.notes[i].hasStem() || this.notes[i].isRest()) {\n                    const bottom_y = this.notes[i].getStemDirection() === Stem.UP\n                        ? this.notes[i].getStemExtents().baseY + Tuplet.metrics.noteHeadOffset\n                        : this.notes[i].getStemExtents().topY + Tuplet.metrics.stemOffset;\n                    if (bottom_y > y_pos) {\n                        y_pos = bottom_y;\n                    }\n                }\n            }\n        }\n        return y_pos + nested_tuplet_y_offset + y_offset;\n    }\n    draw() {\n        const ctx = this.checkContext();\n        this.setRendered();\n        const first_note = this.notes[0];\n        const last_note = this.notes[this.notes.length - 1];\n        if (!this.bracketed) {\n            this.x_pos = first_note.getStemX();\n            this.width = last_note.getStemX() - this.x_pos;\n        }\n        else {\n            this.x_pos = first_note.getTieLeftX() - 5;\n            this.width = last_note.getTieRightX() - this.x_pos + 5;\n        }\n        this.y_pos = this.getYPosition();\n        const addGlyphWidth = (width, glyph) => width + defined(glyph.getMetrics().width);\n        let width = this.numerator_glyphs.reduce(addGlyphWidth, 0);\n        if (this.ratioed) {\n            width = this.denom_glyphs.reduce(addGlyphWidth, width);\n            width += this.point * 0.32;\n        }\n        const notation_center_x = this.x_pos + this.width / 2;\n        const notation_start_x = notation_center_x - width / 2;\n        if (this.bracketed) {\n            const line_width = this.width / 2 - width / 2 - 5;\n            if (line_width > 0) {\n                ctx.fillRect(this.x_pos, this.y_pos, line_width, 1);\n                ctx.fillRect(this.x_pos + this.width / 2 + width / 2 + 5, this.y_pos, line_width, 1);\n                ctx.fillRect(this.x_pos, this.y_pos + (this.location === Tuplet.LOCATION_BOTTOM ? 1 : 0), 1, this.location * 10);\n                ctx.fillRect(this.x_pos + this.width, this.y_pos + (this.location === Tuplet.LOCATION_BOTTOM ? 1 : 0), 1, this.location * 10);\n            }\n        }\n        const shiftY = Tables.currentMusicFont().lookupMetric('digits.shiftY', 0);\n        let x_offset = 0;\n        this.numerator_glyphs.forEach((glyph) => {\n            glyph.render(ctx, notation_start_x + x_offset, this.y_pos + this.point / 3 - 2 + shiftY);\n            x_offset += defined(glyph.getMetrics().width);\n        });\n        if (this.ratioed) {\n            const colon_x = notation_start_x + x_offset + this.point * 0.16;\n            const colon_radius = this.point * 0.06;\n            ctx.beginPath();\n            ctx.arc(colon_x, this.y_pos - this.point * 0.08, colon_radius, 0, Math.PI * 2, false);\n            ctx.closePath();\n            ctx.fill();\n            ctx.beginPath();\n            ctx.arc(colon_x, this.y_pos + this.point * 0.12, colon_radius, 0, Math.PI * 2, false);\n            ctx.closePath();\n            ctx.fill();\n            x_offset += this.point * 0.32;\n            this.denom_glyphs.forEach((glyph) => {\n                glyph.render(ctx, notation_start_x + x_offset, this.y_pos + this.point / 3 - 2 + shiftY);\n                x_offset += defined(glyph.getMetrics().width);\n            });\n        }\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}